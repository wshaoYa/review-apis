// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 为某个枚举单独设置错误码
func IsReviewNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REVIEW_NOT_FOUND.String() && e.Code == 404
}

// 为某个枚举单独设置错误码
func ErrorReviewNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_REVIEW_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsContentMissing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CONTENT_MISSING.String() && e.Code == 400
}

func ErrorContentMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CONTENT_MISSING.String(), fmt.Sprintf(format, args...))
}

// 订单已被评价
func IsOrderReviewed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_REVIEWED.String() && e.Code == 400
}

// 订单已被评价
func ErrorOrderReviewed(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_REVIEWED.String(), fmt.Sprintf(format, args...))
}

// 内部错误
func IsInternalError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INTERNAL_ERROR.String() && e.Code == 500
}

// 内部错误
func ErrorInternalError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INTERNAL_ERROR.String(), fmt.Sprintf(format, args...))
}

// 评价已被商家回复过
func IsHasBeenReplied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_HAS_BEEN_REPLIED.String() && e.Code == 400
}

// 评价已被商家回复过
func ErrorHasBeenReplied(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_HAS_BEEN_REPLIED.String(), fmt.Sprintf(format, args...))
}

// 错误的请求参数
func IsInvalidParam(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_PARAM.String() && e.Code == 400
}

// 错误的请求参数
func ErrorInvalidParam(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVALID_PARAM.String(), fmt.Sprintf(format, args...))
}

// 评价已被商家申诉过
func IsHasBeenAppealed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_HAS_BEEN_APPEALED.String() && e.Code == 400
}

// 评价已被商家申诉过
func ErrorHasBeenAppealed(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_HAS_BEEN_APPEALED.String(), fmt.Sprintf(format, args...))
}

// 申诉不存在
func IsAppealNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_APPEAL_NOT_FOUND.String() && e.Code == 404
}

// 申诉不存在
func ErrorAppealNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_APPEAL_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 申诉已审核
func IsAppealHasBeenAudit(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_APPEAL_HAS_BEEN_AUDIT.String() && e.Code == 404
}

// 申诉已审核
func ErrorAppealHasBeenAudit(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_APPEAL_HAS_BEEN_AUDIT.String(), fmt.Sprintf(format, args...))
}
